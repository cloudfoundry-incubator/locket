// Code generated by counterfeiter. DO NOT EDIT.
package metricsfakes

import (
	"sync"
	"time"

	"code.cloudfoundry.org/locket/metrics"
)

type FakeRequestMetrics struct {
	IncrementRequestsStartedCounterStub        func(delta int)
	incrementRequestsStartedCounterMutex       sync.RWMutex
	incrementRequestsStartedCounterArgsForCall []struct {
		delta int
	}
	IncrementRequestsSucceededCounterStub        func(delta int)
	incrementRequestsSucceededCounterMutex       sync.RWMutex
	incrementRequestsSucceededCounterArgsForCall []struct {
		delta int
	}
	IncrementRequestsFailedCounterStub        func(delta int)
	incrementRequestsFailedCounterMutex       sync.RWMutex
	incrementRequestsFailedCounterArgsForCall []struct {
		delta int
	}
	IncrementRequestsInFlightCounterStub        func(delta int)
	incrementRequestsInFlightCounterMutex       sync.RWMutex
	incrementRequestsInFlightCounterArgsForCall []struct {
		delta int
	}
	DecrementRequestsInFlightCounterStub        func(delta int)
	decrementRequestsInFlightCounterMutex       sync.RWMutex
	decrementRequestsInFlightCounterArgsForCall []struct {
		delta int
	}
	UpdateLatencyStub        func(dur time.Duration)
	updateLatencyMutex       sync.RWMutex
	updateLatencyArgsForCall []struct {
		dur time.Duration
	}
	GetRequestsInFlightStub        func() uint64
	getRequestsInFlightMutex       sync.RWMutex
	getRequestsInFlightArgsForCall []struct{}
	getRequestsInFlightReturns     struct {
		result1 uint64
	}
	getRequestsInFlightReturnsOnCall map[int]struct {
		result1 uint64
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRequestMetrics) IncrementRequestsStartedCounter(delta int) {
	fake.incrementRequestsStartedCounterMutex.Lock()
	fake.incrementRequestsStartedCounterArgsForCall = append(fake.incrementRequestsStartedCounterArgsForCall, struct {
		delta int
	}{delta})
	fake.recordInvocation("IncrementRequestsStartedCounter", []interface{}{delta})
	fake.incrementRequestsStartedCounterMutex.Unlock()
	if fake.IncrementRequestsStartedCounterStub != nil {
		fake.IncrementRequestsStartedCounterStub(delta)
	}
}

func (fake *FakeRequestMetrics) IncrementRequestsStartedCounterCallCount() int {
	fake.incrementRequestsStartedCounterMutex.RLock()
	defer fake.incrementRequestsStartedCounterMutex.RUnlock()
	return len(fake.incrementRequestsStartedCounterArgsForCall)
}

func (fake *FakeRequestMetrics) IncrementRequestsStartedCounterArgsForCall(i int) int {
	fake.incrementRequestsStartedCounterMutex.RLock()
	defer fake.incrementRequestsStartedCounterMutex.RUnlock()
	return fake.incrementRequestsStartedCounterArgsForCall[i].delta
}

func (fake *FakeRequestMetrics) IncrementRequestsSucceededCounter(delta int) {
	fake.incrementRequestsSucceededCounterMutex.Lock()
	fake.incrementRequestsSucceededCounterArgsForCall = append(fake.incrementRequestsSucceededCounterArgsForCall, struct {
		delta int
	}{delta})
	fake.recordInvocation("IncrementRequestsSucceededCounter", []interface{}{delta})
	fake.incrementRequestsSucceededCounterMutex.Unlock()
	if fake.IncrementRequestsSucceededCounterStub != nil {
		fake.IncrementRequestsSucceededCounterStub(delta)
	}
}

func (fake *FakeRequestMetrics) IncrementRequestsSucceededCounterCallCount() int {
	fake.incrementRequestsSucceededCounterMutex.RLock()
	defer fake.incrementRequestsSucceededCounterMutex.RUnlock()
	return len(fake.incrementRequestsSucceededCounterArgsForCall)
}

func (fake *FakeRequestMetrics) IncrementRequestsSucceededCounterArgsForCall(i int) int {
	fake.incrementRequestsSucceededCounterMutex.RLock()
	defer fake.incrementRequestsSucceededCounterMutex.RUnlock()
	return fake.incrementRequestsSucceededCounterArgsForCall[i].delta
}

func (fake *FakeRequestMetrics) IncrementRequestsFailedCounter(delta int) {
	fake.incrementRequestsFailedCounterMutex.Lock()
	fake.incrementRequestsFailedCounterArgsForCall = append(fake.incrementRequestsFailedCounterArgsForCall, struct {
		delta int
	}{delta})
	fake.recordInvocation("IncrementRequestsFailedCounter", []interface{}{delta})
	fake.incrementRequestsFailedCounterMutex.Unlock()
	if fake.IncrementRequestsFailedCounterStub != nil {
		fake.IncrementRequestsFailedCounterStub(delta)
	}
}

func (fake *FakeRequestMetrics) IncrementRequestsFailedCounterCallCount() int {
	fake.incrementRequestsFailedCounterMutex.RLock()
	defer fake.incrementRequestsFailedCounterMutex.RUnlock()
	return len(fake.incrementRequestsFailedCounterArgsForCall)
}

func (fake *FakeRequestMetrics) IncrementRequestsFailedCounterArgsForCall(i int) int {
	fake.incrementRequestsFailedCounterMutex.RLock()
	defer fake.incrementRequestsFailedCounterMutex.RUnlock()
	return fake.incrementRequestsFailedCounterArgsForCall[i].delta
}

func (fake *FakeRequestMetrics) IncrementRequestsInFlightCounter(delta int) {
	fake.incrementRequestsInFlightCounterMutex.Lock()
	fake.incrementRequestsInFlightCounterArgsForCall = append(fake.incrementRequestsInFlightCounterArgsForCall, struct {
		delta int
	}{delta})
	fake.recordInvocation("IncrementRequestsInFlightCounter", []interface{}{delta})
	fake.incrementRequestsInFlightCounterMutex.Unlock()
	if fake.IncrementRequestsInFlightCounterStub != nil {
		fake.IncrementRequestsInFlightCounterStub(delta)
	}
}

func (fake *FakeRequestMetrics) IncrementRequestsInFlightCounterCallCount() int {
	fake.incrementRequestsInFlightCounterMutex.RLock()
	defer fake.incrementRequestsInFlightCounterMutex.RUnlock()
	return len(fake.incrementRequestsInFlightCounterArgsForCall)
}

func (fake *FakeRequestMetrics) IncrementRequestsInFlightCounterArgsForCall(i int) int {
	fake.incrementRequestsInFlightCounterMutex.RLock()
	defer fake.incrementRequestsInFlightCounterMutex.RUnlock()
	return fake.incrementRequestsInFlightCounterArgsForCall[i].delta
}

func (fake *FakeRequestMetrics) DecrementRequestsInFlightCounter(delta int) {
	fake.decrementRequestsInFlightCounterMutex.Lock()
	fake.decrementRequestsInFlightCounterArgsForCall = append(fake.decrementRequestsInFlightCounterArgsForCall, struct {
		delta int
	}{delta})
	fake.recordInvocation("DecrementRequestsInFlightCounter", []interface{}{delta})
	fake.decrementRequestsInFlightCounterMutex.Unlock()
	if fake.DecrementRequestsInFlightCounterStub != nil {
		fake.DecrementRequestsInFlightCounterStub(delta)
	}
}

func (fake *FakeRequestMetrics) DecrementRequestsInFlightCounterCallCount() int {
	fake.decrementRequestsInFlightCounterMutex.RLock()
	defer fake.decrementRequestsInFlightCounterMutex.RUnlock()
	return len(fake.decrementRequestsInFlightCounterArgsForCall)
}

func (fake *FakeRequestMetrics) DecrementRequestsInFlightCounterArgsForCall(i int) int {
	fake.decrementRequestsInFlightCounterMutex.RLock()
	defer fake.decrementRequestsInFlightCounterMutex.RUnlock()
	return fake.decrementRequestsInFlightCounterArgsForCall[i].delta
}

func (fake *FakeRequestMetrics) UpdateLatency(dur time.Duration) {
	fake.updateLatencyMutex.Lock()
	fake.updateLatencyArgsForCall = append(fake.updateLatencyArgsForCall, struct {
		dur time.Duration
	}{dur})
	fake.recordInvocation("UpdateLatency", []interface{}{dur})
	fake.updateLatencyMutex.Unlock()
	if fake.UpdateLatencyStub != nil {
		fake.UpdateLatencyStub(dur)
	}
}

func (fake *FakeRequestMetrics) UpdateLatencyCallCount() int {
	fake.updateLatencyMutex.RLock()
	defer fake.updateLatencyMutex.RUnlock()
	return len(fake.updateLatencyArgsForCall)
}

func (fake *FakeRequestMetrics) UpdateLatencyArgsForCall(i int) time.Duration {
	fake.updateLatencyMutex.RLock()
	defer fake.updateLatencyMutex.RUnlock()
	return fake.updateLatencyArgsForCall[i].dur
}

func (fake *FakeRequestMetrics) GetRequestsInFlight() uint64 {
	fake.getRequestsInFlightMutex.Lock()
	ret, specificReturn := fake.getRequestsInFlightReturnsOnCall[len(fake.getRequestsInFlightArgsForCall)]
	fake.getRequestsInFlightArgsForCall = append(fake.getRequestsInFlightArgsForCall, struct{}{})
	fake.recordInvocation("GetRequestsInFlight", []interface{}{})
	fake.getRequestsInFlightMutex.Unlock()
	if fake.GetRequestsInFlightStub != nil {
		return fake.GetRequestsInFlightStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getRequestsInFlightReturns.result1
}

func (fake *FakeRequestMetrics) GetRequestsInFlightCallCount() int {
	fake.getRequestsInFlightMutex.RLock()
	defer fake.getRequestsInFlightMutex.RUnlock()
	return len(fake.getRequestsInFlightArgsForCall)
}

func (fake *FakeRequestMetrics) GetRequestsInFlightReturns(result1 uint64) {
	fake.GetRequestsInFlightStub = nil
	fake.getRequestsInFlightReturns = struct {
		result1 uint64
	}{result1}
}

func (fake *FakeRequestMetrics) GetRequestsInFlightReturnsOnCall(i int, result1 uint64) {
	fake.GetRequestsInFlightStub = nil
	if fake.getRequestsInFlightReturnsOnCall == nil {
		fake.getRequestsInFlightReturnsOnCall = make(map[int]struct {
			result1 uint64
		})
	}
	fake.getRequestsInFlightReturnsOnCall[i] = struct {
		result1 uint64
	}{result1}
}

func (fake *FakeRequestMetrics) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.incrementRequestsStartedCounterMutex.RLock()
	defer fake.incrementRequestsStartedCounterMutex.RUnlock()
	fake.incrementRequestsSucceededCounterMutex.RLock()
	defer fake.incrementRequestsSucceededCounterMutex.RUnlock()
	fake.incrementRequestsFailedCounterMutex.RLock()
	defer fake.incrementRequestsFailedCounterMutex.RUnlock()
	fake.incrementRequestsInFlightCounterMutex.RLock()
	defer fake.incrementRequestsInFlightCounterMutex.RUnlock()
	fake.decrementRequestsInFlightCounterMutex.RLock()
	defer fake.decrementRequestsInFlightCounterMutex.RUnlock()
	fake.updateLatencyMutex.RLock()
	defer fake.updateLatencyMutex.RUnlock()
	fake.getRequestsInFlightMutex.RLock()
	defer fake.getRequestsInFlightMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRequestMetrics) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metrics.RequestMetrics = new(FakeRequestMetrics)
