// Code generated by counterfeiter. DO NOT EDIT.
package expirationfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"code.cloudfoundry.org/locket/db"
	"code.cloudfoundry.org/locket/expiration"
)

type FakeLockPick struct {
	RegisterTTLStub        func(logger lager.Logger, lock *db.Lock)
	registerTTLMutex       sync.RWMutex
	registerTTLArgsForCall []struct {
		logger lager.Logger
		lock   *db.Lock
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLockPick) RegisterTTL(logger lager.Logger, lock *db.Lock) {
	fake.registerTTLMutex.Lock()
	fake.registerTTLArgsForCall = append(fake.registerTTLArgsForCall, struct {
		logger lager.Logger
		lock   *db.Lock
	}{logger, lock})
	fake.recordInvocation("RegisterTTL", []interface{}{logger, lock})
	fake.registerTTLMutex.Unlock()
	if fake.RegisterTTLStub != nil {
		fake.RegisterTTLStub(logger, lock)
	}
}

func (fake *FakeLockPick) RegisterTTLCallCount() int {
	fake.registerTTLMutex.RLock()
	defer fake.registerTTLMutex.RUnlock()
	return len(fake.registerTTLArgsForCall)
}

func (fake *FakeLockPick) RegisterTTLArgsForCall(i int) (lager.Logger, *db.Lock) {
	fake.registerTTLMutex.RLock()
	defer fake.registerTTLMutex.RUnlock()
	return fake.registerTTLArgsForCall[i].logger, fake.registerTTLArgsForCall[i].lock
}

func (fake *FakeLockPick) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.registerTTLMutex.RLock()
	defer fake.registerTTLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLockPick) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ expiration.LockPick = new(FakeLockPick)
